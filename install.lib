#!/bin/bash
lib_script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# ----------- Package Maps ----------- #

declare -A apt_packages=(
    [pip3]="python3-pip"
    [go]="golang"
    [make]="build-essential"
    [sqlite]="sqlite3"
    [sshd]="openssh-server"
    [nc]="netcat"
)

declare -A yum_packages=(
    [python3]='sudo yum install python3 -y '
    [pip3]="sudo yum install python3-pip -y "
    [go]="sudo yum install golang -y "
    [git]="sudo yum install git -y"
    [make]='sudo yum groupinstall "Development Tools" -y'
    [curl]="sudo yum install curl -y"
    [wget]="sudo yum install wget -y"
    [sqlite]="sudo yum install sqlite3 -y"
    [jq]="sudo yum install jq -y"
    [sshd]="sudo yum install openssh-server -y"
    [nc]="sudo yum install nc -y"
)

declare -A dnf_packages=(
    [python3]='sudo dnf install python3 -y '
    [pip3]="sudo dnf install python3-pip -y "
    [go]="sudo dnf install golang -y "
    [git]="sudo dnf install git -y"
    [make]='sudo dnf groupinstall "Development Tools" -y'
    [curl]="sudo dnf install curl -y"
    [wget]="sudo dnf install wget -y"
    [sqlite]="sudo dnf install sqlite3"
    [jq]="sudo dnf install jq -y"
    [sshd]="sudo dnf install openssh-server -y"
    [nc]="sudo dnf install nc -y"
)

declare -A pacman_packages=(
    [pip3]="python-pip"
    [pipx]="python-pipx"
    [sshd]="openssh"
    [nc]="gnu-netcat"
)

declare -A zypper_packages=(
    [pip3]="python3-pip"
)

declare -A emerge_packages=(
    [python3]="dev-lang/python3.11"
    [pip3]="dev=python/pip"
    [go]="dev-lang/go"
    [git]="dev-vcs/git"
    [make]="build"
    [wget]="net-misc/wget"
    [expect]="dev-tcltk/expect"
    [sqlite]="dev-db/sqlite"
    [jq]="app-misc/jq"
    [sshd]="net-misc/openssh"
)


# ----------- Boilerplate Functions ----------- #

generic_install_package() {
  local package_name=$1
  local install_cmd=$2

  if [ -z "$package_name" ] || [ -z "$install_cmd" ]; then
    echo "Missing Required Arguments In 'generic_install_package'"
    return 1
  fi
  
  echo "📦 Installing $1..."

  if eval "$install_cmd"; then 
    echo "Successfully Installed $package_name"
  else
    echo "A problem occured while installing $package_name"
    return 1
  fi
}

set_shell_script_permissions() {
  local directory=$1

  echo -e "\t 🖥️ Setting permissions for shell scripts in $directory"

  if [ -z "$directory" ]; then
      echo "set_shell_script_permissions expects a directory as an argument"
      return 1
  fi

  if [ ! -d "$directory" ]; then
      echo "The directory $directory does not exist."
      return 1
  fi

  find "$directory" -type f -name "*.sh" -exec chmod 755 {} \;
  echo "Project shell scripts are now exectuable"
  return 0
}

add_directories_to_path() {
  local ADDITIONAL_PATHS=("$@") 
  local PROFILE_FILE="/etc/profile.d/added-paths.sh"
  local PATH_ADDITION=""

  for DIR in "${ADDITIONAL_PATHS[@]}"; do
      if echo ":$PATH:" | grep -q ":$DIR:" ; then
          echo "$DIR is already in PATH"
      else
          echo "Adding $DIR to PATH"
          PATH_ADDITION="$DIR:$PATH_ADDITION"
      fi
  done

  if [ -n "$PATH_ADDITION" ]; then
      export PATH="$PATH_ADDITION$PATH"
      local EXPORT_LINE="export PATH=\"$PATH_ADDITION\$PATH\""
      echo -e "#!/bin/bash\n$EXPORT_LINE" | sudo tee "$PROFILE_FILE"
  fi
}


prompt_for_api_key() {
  local api_name=$1
  if [ -z $api_name ] ;then
    echo "prompt_for_api_key expects an API name as an argument"
    return 1
  fi 

  local api_key

  while true; do
    read -rsp "Please enter your $api_name API Key: " api_key
    if [ -z "$api_key" ]; then
      echo "API key can't be empty. please enter a valid $api_name API key"
    else
      break
    fi
  done
  echo "$api_key"
}

# ----------- Package Manager Install Functions ----------- #
install_with_apt() {
  local packages=("$@")
  sudo apt update
  for pkg in "${packages[@]}"; do
    local apt_pkg=${apt_packages[$pkg]:-$pkg}
    generic_install_package "$pkg" "sudo apt install -y $apt_pkg"
  done
}

install_with_yum() {
  local packages=("$@")
  sudo yum check-update

  for pkg in "${packages[@]}"; do
  local yum_cmd=${yum_packages[$pkg]:-"sudo yum install $pkg -y"}
    generic_install_package "$pkg" "$yum_cmd"
  done
}

install_with_dnf() {
  local packages=("$@")
  sudo dnf check-update

  for pkg in "${packages[@]}"; do
    local dnf_cmd=${dnf_packages[$pkg]:-"sudo dnf install $pkg -y"}
    generic_install_package "$pkg" "$dnf_cmd"
  done
}

install_with_pacman() {
  local packages=("$@")
  for pkg in "${packages[@]}"; do
    local pacman_pkg=${pacman_packages[$pkg]:-$pkg}
    generic_install_package "$pkg" "sudo pacman -S --noconfirm $pacman_pkg"
  done
}

install_with_zypper() {
  local packages=("$@")
  sudo zypper refresh

  for pkg in "${packages[@]}"; do
    local zypper_pkg=${zypper_packages[$pkg]:-$pkg}
    generic_install_package "$pkg" "sudo zypper install -y $zypper_pkg"
  done
}

install_with_emerge() {
  local packages=("$@")
  sudo emerge --sync
  for pkg in "${packages[@]}"; do
    local emerge_pkg=${emerge_packages[$pkg]:-$pkg}
    generic_install_package "$pkg" "sudo emerge $emerge_pkg"
  done
}

install_with_snap() {
    local package_name=$1
    local snap_cmd="sudo snap install $package_name"
    generic_install_package "$package_name" "$snap_cmd"
}

install_with_flatpak() {
    local package_name=$1
    local flatpack_cmd="flatpak install -y $package_name"
    generic_install_package "$package_name" "$flatpack_cmd"
}

install_packages() {
    local packages=("$@")
    
    # Check for APT (Debian/Ubuntu)
    if command -v apt > /dev/null; then
        echo "Using APT package manager."
        install_with_apt "${packages[@]}"
    # Check for DNF (Fedora)
    elif command -v dnf > /dev/null; then
        echo "Using DNF package manager."
        install_with_dnf "${packages[@]}"
    # Check for YUM (RHEL, CentOS)
    elif command -v yum > /dev/null; then
        echo "Using YUM package manager."
        install_with_yum "${packages[@]}"
    # Check for Zypper (openSUSE)
    elif command -v zypper > /dev/null; then
        echo "Using Zypper package manager."
        install_with_zypper "${packages[@]}"
    # Check for Emerge (Gentoo)
    elif command -v emerge > /dev/null; then
        echo "Using Emerge package manager."
        install_with_emerge "${packages[@]}"
    else
        echo "No recognized package manager found."
        return 1
    fi
}
