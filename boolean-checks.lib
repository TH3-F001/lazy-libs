#!/bin/bash

# --------------- File Checks --------------- # 
path_exists() {
    local PATH_ARG=$1
    if [ -e "$PATH_ARG" ]; then
        return 0
    else
        return 1
    fi
}

path_doesnt_exist() {
    local PATH_ARG=$1
    if [ ! -e "$PATH_ARG" ]; then
        return 0
    else
        return 1
    fi
}

is_valid_file() {
    local FILE_PATH=$1
    if [ -f "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

isnt_valid_file() {
    local FILE_PATH=$1
    if [ ! -f "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

is_valid_directory() {
    local DIR_PATH=$1
    if [ -d "$DIR_PATH" ]; then
        return 0
    else
        return 1
    fi
}

isnt_valid_directory() {
    local FILE_PATH=$1
    if [ ! -d "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

file_is_empty() {
    local FILE_PATH=$1

    if [ ! -f "$FILE_PATH" ]; then
        echo "ERROR: The filepath provided to file_is_empty() doesnt exist or isnt a file" >&2
        return 1
    fi

    if [ ! -s "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

file_isnt_empty() {
    local FILE_PATH=$1

    if [ ! -f "$FILE_PATH" ]; then
        echo "ERROR: The filepath provided to file_isnt_empty() doesnt exist or isnt a file" >&2
        return 1
    fi
    
    if [ -s "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

file_is_readable() {
    local FILE_PATH=$1

    if [ ! -f "$FILE_PATH" ]; then
        echo "ERROR: The filepath provided to file_is_readable() doesnt exist or isnt a file" >&2
        return 1
    fi
    
    if [ -r "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}


file_isnt_readable() {
    local FILE_PATH=$1

    if [ ! -f "$FILE_PATH" ]; then
        echo "ERROR: The filepath provided to file_isnt_readable() doesnt exist or isnt a file" >&2
        return 1
    fi
    
    if [ ! -r "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

file_is_writable() {
    local FILE_PATH=$1

    if [ ! -f "$FILE_PATH" ]; then
        echo "ERROR: The filepath provided to file_is_writeable() doesnt exist or isnt a file" >&2
        return 1
    fi
    
    if [ -w "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}


file_isnt_writable() {
    local FILE_PATH=$1

    if [ ! -f "$FILE_PATH" ]; then
        echo "ERROR: The filepath provided to file_isnt_writable() doesnt exist or isnt a file" >&2
        return 1
    fi
    
    if [ ! -w "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

file_is_executable() {
    local FILE_PATH=$1

    if [ ! -f "$FILE_PATH" ]; then
        echo "ERROR: The filepath provided to file_is_executable() doesnt exist or isnt a file" >&2
        return 1
    fi
    
    if [ -x "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

file_isnt_executable() {
    local FILE_PATH=$1

    if [ ! -f "$FILE_PATH" ]; then
        echo "ERROR: The filepath provided to file_isnt_executable() doesnt exist or isnt a file" >&2
        return 1
    fi
    
    if [ ! -x "$FILE_PATH" ]; then
        return 0
    else
        return 1
    fi
}

file_is_newer_than() {
    local FILE_A=$1
    local FILE_B=$2

    if [ ! -f "$FILE_A" ] || [ ! -f "$FILE_B" ]; then
        echo "ERROR: The filepath provided to file_is_newer_than() doesnt exist or isnt a file" >&2
        return 1
    fi

    if [ "$FILE_A" -nt "$FILE_B" ]; then
        return 0
    else
        return 1
    fi
}

file_is_older_than() {
    local FILE_A=$1
    local FILE_B=$2

    if [ ! -f "$FILE_A" ] || [ ! -f "$FILE_B" ]; then
        echo "ERROR: The filepath provided to file_is_older_than() doesnt exist or isnt a file" >&2
        return 1
    fi

    if [ "$FILE_A" -ot "$FILE_B" ]; then
        return 0
    else
        return 1
    fi
}


# --------------- String Checks --------------- # 
string_is_empty() {
    local STRING=$1
    if [ -z "$STRING" ]; then
        return 0
    else
        return 1
    fi
}

string_isnt_empty() {
    local STRING=$1
    if [ -n "$STRING" ]; then
        return 0
    else
        return 1
    fi
}


# --------------- Integer Checks --------------- # 
ints_are_equal() {
    local INT_A=$1
    local INT_B=$2

    if [ "$INT_A" -eq "$INT_B" ]; then
        return 0
    else
        return 1
    fi
}

ints_are_not_equal() {
    local INT_A=$1
    local INT_B=$2

    if [ "$INT_A" -ne "$INT_B" ]; then
        return 0
    else
        return 1
    fi
}

int_is_greater_than() {
    local INT_A=$1
    local INT_B=$2
    if [ "$INT_A" -gt "$INT_B" ]; then
        return 0
    else
        return 1
    fi
}

int_is_less_than() {
    local INT_A=$1
    local INT_B=$2

    if [ "$INT_A" -lt "$INT_B" ]; then
        return 0
    else
        return 1
    fi
}

int_is_greater_than_or_equal() {
    local INT_A=$1
    local INT_B=$2

    if [ "$INT_A" -ge "$INT_B" ]; then
        return 0
    else
        return 1
    fi
}

int_is_less_than_or_equal() {
    local INT_A=$1
    local INT_B=$2

    if [ "$INT_A" -le "$INT_B" ]; then
        return 0
    else
        return 1
    fi
}